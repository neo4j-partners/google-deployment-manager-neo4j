{#
 # This sub-template creates a collection of VMs, and plugins necessary for those VMs,
 # including IP addresses, availability sets, and so on.
 #
  # Intention behind this snippet is to be able to create a node set as either CORE or READ_REPLICA
 # with all dependent plugins.
 # 
 # Note that this template has many ARM parameter/variable dependencies, generally taken from
 # mainTemplate.json and clusterTemplate.json
 #}
 {%
  set image = "neo4j-enterprise-1-4.3.2-apoc_2018-09-11T12_14_38Z"
 %}
 {
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "Location": {
            "type": "string"
        },

        "ClusterName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 11
        },

        "DBMS_MODE": {
            "type": "string"
        },

        "SubnetID": {
            "type": "string"
        },

        "NetworkSecurityGroupId": {
            "type": "string"
        },

        "NodePrefix": {
            "type": "string"
        },

        "N": {
            "type": "int"
        },

        "VmSize": {
            "type": "string"
        },

        "DataDiskType": {
            "type": "string"
        },

        "DataDiskSizeGB": {
            "type": "int",
            "minValue": 5,
            "maxvalue": 4095,
            "defaultValue": 1024
        },

        "AdminUserName": {
            "type": "securestring"
        },

        "AdminAuthType": {
            "type": "string",
            "allowedValues": ["sshpublickey", "password"]
        },

        "AdminCredential": {
            "type": "securestring"
        },

        "PublicIPAllocationMethod": {
            "type": "string",
            "allowedValues": ["Static", "Dynamic"]
        },

        "Neo4jPassword": {
            "type": "securestring"
        },

        "Neo4jHttpsPort": {
            "type": "int"
        },

        "Neo4jHttpPort": {
            "type": "int"
        },

        "Neo4jBoltPort": {
            "type": "int"
        },
        
        "Neo4JTags": {
            "type": "object",
            "metadata": {
                "description": "Dictionary of tags to apply to the various resources"
            }
        },

        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "base URL at which Marketplace package files are stored. Value adjusted automatically during Marketplace submission process."
            }
        },

        "_artifactsLocationSasToken": {
            "type": "securestring"
        }
    },
    "variables": {
        "uniqueTag": "[uniqueString(resourceGroup().id, deployment().name)]",
        "namePrefixes": {
            "nic": "[concat(parameters('ClusterName'),'-nic')]",
            "vm": "[concat(parameters('ClusterName'),'-vm')]",
            "publicIP": "[concat(parameters('ClusterName'),'-public-ip')]",
            "availabilitySet": "[concat(parameters('ClusterName'), '-as')]"
        },
        "resourceIDs": {
            "availabilitySet": "[resourceId('Microsoft.Compute/availabilitySets', variables('namePrefixes').availabilitySet)]",
            "publicIP": "[resourceId('Microsoft.Network/publicIPAddresses', variables('namePrefixes').publicIP)]"
        },
{#
        "imageReference": {
            "id": "/subscriptions/e4486a99-00d6-4e46-aab0-b087f918eda9/resourceGroups/neo4j-public/providers/Microsoft.Compute/images/{{image}}"
        },
#}
        "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('AdminUserName'),'/.ssh/authorized_keys')]",
                        "keyData": "[parameters('AdminCredential')]"
                    }
                ]
            }
        }
    },
    "resources": [
    
{
    {# 
     # DOCS: https://docs.microsoft.com/en-us/azure/virtual-machines/windows/manage-availability#configure-multiple-virtual-machines-in-an-availability-set-for-redundancy 
     # Update domains control how many machines could be restarted/updated.
     # Fault domains control hardware co-location.  Availability sets let us spread our VMs out
     # across these domains so that a power source failure or needed VM upgrade can't interrupt the
     # entire cluster, or even the entire read replica set.
     #}
    "type": "Microsoft.Compute/availabilitySets",
    "name": "[concat(variables('namePrefixes').availabilitySet, '-', parameters('NodePrefix'))]",
    "apiVersion": "2019-12-01",
    "location": "[parameters('Location')]",
    "tags": "[parameters('Neo4JTags')]",
    "properties": {
        "platformUpdateDomainCount": 20,
        "platformFaultDomainCount": 2
    },
    "sku": {
        "name": "Aligned"
    }
},
{
    "type": "Microsoft.Network/publicIPAddresses",
    "name": "[concat(variables('namePrefixes').publicIP, '-', parameters('NodePrefix'), '-', copyIndex())]",
    "apiVersion": "2019-04-01",
    "location": "[parameters('Location')]",
    "copy": {
        "name": "[concat('ip', parameters('NodePrefix'), 'CI')]",
        "count": "[parameters('N')]"
    },
    "properties": {
        "publicIPAllocationMethod": "[parameters('PublicIPAllocationMethod')]",
        "dnsSettings": {
            "domainNameLabel": "[toLower(concat(parameters('ClusterName'), '-', parameters('NodePrefix'), '-node-', copyIndex(), '-', variables('uniqueTag')))]"
        }                
    }
},
{
    "type": "Microsoft.Network/networkInterfaces",
    "name": "[concat(variables('namePrefixes').nic, '-', parameters('NodePrefix'), '-', copyIndex())]",
    "apiVersion": "2019-09-01",
    "location": "[parameters('Location')]",
    "tags": "[parameters('Neo4JTags')]",
    "dependsOn": [
        "[concat(variables('resourceIDs').publicIP, '-', parameters('NodePrefix'), '-', copyIndex())]"
    ],
    "copy": {
        "name": "nicCI",
        "count": "[parameters('N')]"
    },
    "properties": {
        "ipConfigurations": [
            {
                "name": "ipconfig1",
                "properties": {
                    "subnet": { "id": "[parameters('SubnetID')]" },
                    "privateIPAllocationMethod": "Dynamic",
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('ClusterName'), '-public-ip', '-', parameters('NodePrefix'), '-', copyIndex()))]"
                    }
                }
            }
        ],
        {# This bit is critical because it assigns an internal DNS address to each node, which in turn 
         # is referenced in initial_cluster_members by the nodes
         #}
        "dnsSettings": {
            "internalDnsNameLabel": "[toLower(concat(parameters('ClusterName'), '-', parameters('NodePrefix'), '-node-', copyIndex()))]"
        },        
        "enableIPForwarding": false,
        "networkSecurityGroup": {
            "id": "[parameters('NetworkSecurityGroupId')]"
        }
    }
},
{
    "type": "Microsoft.Compute/virtualMachines",
    "name": "[concat(variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex())]",
    "apiVersion": "2019-12-01",
    "location": "[parameters('Location')]",
    "tags": {
        "provider": "B9442746-5BFF-4E2F-BC90-1F49C5791FAA",
        "neo4jURL": "https://neo4j.com/",
        "licensing": "https://neo4j.com/lp/enterprise-cloud/?utm_content=azure-marketplace",
        "dbms_mode": "[parameters('DBMS_MODE')]",
        "neo4j_mode": "cluster",
        "dbms_connector_https_listen_address": "[concat('0.0.0.0:', string(parameters('Neo4jHttpsPort')))]",
        "dbms_connector_http_listen_address": "[concat('0.0.0.0:', string(parameters('Neo4jHttpPort')))]",
        "dbms_connector_bolt_listen_address": "[concat('0.0.0.0:', string(parameters('Neo4jBoltPort')))]",
        "causal_clustering_minimum_core_cluster_size_at_formation": "3",

        {#
         # Gnarly concatenation ahead.   General format we're going for is:
         # node1DNS:5000,node2DNS:5000,node3DNS:5000
         #
         # Note that no matter how many core nodes the cluster has, the initial discovery members of 3 is
         # enough for them to all find themselves.  Also, since min size is 3, doing first 3 is always safe.
         #
         # Pattern for one DNS entry is:
         # concat(parameters('ClusterName'), '-', 'vm-core-0')
         #}
        "causal_clustering_initial_discovery_members": "[concat(parameters('ClusterName'), '-', 'vm-core-0:5000,', parameters('ClusterName'), '-', 'vm-core-1:5000,', parameters('ClusterName'), '-', 'vm-core-2:5000')]",
        "causal_clustering_discovery_type": "LIST",
        "dbms_connector_bolt_tls_level": "OPTIONAL"
    },
    {#
     # For local testing, comment out the "plan" object, and swap the "imageReference" below.
     #}
    "plan": {
        "name": "neo4j_4_3_2_apoc",
        "publisher": "neo4j",
        "product": "neo4j-enterprise-4_3"
    },
    "dependsOn": [
        "[concat(variables('resourceIDs').availabilitySet, '-', parameters('NodePrefix'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('namePrefixes').nic, '-', parameters('NodePrefix'), '-', copyIndex()))]"
    ],
    "copy": {
        "name": "[concat('vm', parameters('DBMS_MODE'), 'CI')]",
        "count": "[parameters('N')]"
    },
    "properties": {
        "availabilitySet": {            
            "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('namePrefixes').availabilitySet, '-', parameters('NodePrefix')))]"
        },
        "hardwareProfile": {
            "vmSize": "[parameters('VmSize')]"
        },
        "storageProfile": {
			"imageReference": {
                "publisher": "neo4j",
                "offer": "neo4j-enterprise-4_3",
                "sku": "neo4j_4_3_2_apoc",
                "version": "latest"
			},
{#            
            "imageReference": "[variables('imageReference')]",
#}
            "osDisk": {
                "name": "[concat(variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex(), '-OS')]",
                "createOption": "FromImage",
                "managedDisk": {
                    "storageAccountType": "Standard_LRS"
                }
            },
            "dataDisks": [
                {
                    "lun": 0,
                    "name": "[concat(variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex(), '-Data-0')]",
                    "createOption": "Empty",
                    "managedDisk": {
                        "storageAccountType": "[parameters('DataDiskType')]"
                    },
                    "caching": "None",
                    "diskSizeGB": "[parameters('DataDiskSizeGB')]"
                }
            ]
        },
        "osProfile": {
            "computerName": "[concat(variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex())]",
            "adminUsername": "[parameters('AdminUserName')]",
            "adminPassword": "[parameters('AdminCredential')]",
            "linuxConfiguration": "[if(equals(parameters('AdminAuthType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "networkProfile": {
            "networkInterfaces": [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('namePrefixes').nic, '-', parameters('NodePrefix'), '-', copyIndex()))]"
                }
            ]
        }
    }
},
{
    "type": "Microsoft.Resources/deployments",
    "name": "[concat('ConfigureVM-', variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex())]",
    "apiVersion": "2019-05-01",
    "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex())]"
    ],
    "copy": {
        "name": "vmExtLoop",
        "count": "[parameters('N')]"
    },
    "properties": {
        "mode": "Incremental",
        "templateLink": {
            "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/scriptTemplate.json', parameters('_artifactsLocationSasToken')))]",
            "contentVersion": "1.0.0.0"
        },
        "parameters": {
            "VmName": {
                "value": "[concat(variables('namePrefixes').vm, '-', parameters('NodePrefix'), '-', copyIndex())]"
            },
            "Location": {
                "value": "[parameters('Location')]"
            },
            "Password": {
                "value": "[parameters('Neo4jPassword')]"
            },
            "_artifactsLocation": {
                "value": "[parameters('_artifactsLocation')]"
            },
            "_artifactsLocationSasToken": {
                "value": "[parameters('_artifactsLocationSasToken')]"
            }
        }
    }
}
    ]
}
