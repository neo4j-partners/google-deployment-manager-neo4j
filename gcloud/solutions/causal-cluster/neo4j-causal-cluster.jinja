{% import "path_utils.jinja" as path_utils with context %}

{% set project = env["project"] %}
{% set deployment = env["deployment"] %}
{% set name = "%s-multivm-tmpl" % env["name"] %}
{% set zone = properties["zone"] %}
{% set machineType = properties["machineType"] %}
{% set network = path_utils.networkPath(properties["network"]) %}
{% set subnetwork = properties["subnetwork"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}
{% set hasExternalIP = properties["externalIP"] != "None" %}
{# Software status only works if the VM has an external IP. #}
{% set enableStatusWaiter = hasExternalIP %}

{#
 # Template configuration options specific to neo4j deploy
 # Param will come as a string, take care to use goofy jinja int filter,
 # since jinja wants us to feel pain and doesn't expose python int(). :)
 #}
{% if "clusterNodes" in properties %}
   {% set clusterNodes = properties["clusterNodes"] | int %}
{% else %}
   {% set clusterNodes = 3 | int %} {# Value must be >= 3 #}
{% endif %}

{% if "readReplicas" in properties %}
   {% set readReplicas = properties["readReplicas"] | int %}
{% else %}
   {% set readReplicas = 0 | int %}
{% endif %}

{% set passwordLength = 16 %}

{# Image must be hardcoded, and must be tied to launcher-public for correct perms.
 # Remember to update in c2d_deployment_configuration.json too!
 #}

{% set vmImage = "https://www.googleapis.com/compute/v1/projects/launcher-public/global/images/neo4j-enterprise-1-4-3-6-apoc-bloom" %}

{# This is a prefix only. For n nodes, this template deploys
 # {{instanceName}}-1, {{instanceName}}-2, ... n.
 #}
{% set instanceName = "%s-core-vm" % deployment %}

resources:
  - name: generated-password
    type: password.py
    properties:
      length: {{ passwordLength }}
      includeSymbols: false

  - name: {{ name }}-cores
    type: vm_multiple_instances.py
    properties:
      password: $(ref.generated-password.password)
      tags:
        items:
        - neo4j
        - neo4j-core-node
        - neo4j-causal-cluster
        - neo4j-{{ deployment }}
      instanceName: {{ instanceName }}
      numberOfVMReplicas: {{ clusterNodes }}
      sourceImage: {{ vmImage }}
      zone: {{ zone }}
      machineType: {{ machineType }}
      network: {{ network }}
      {% if subnetwork %}
      subnetwork: {{ subnetwork }}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      hasExternalIP: {{ hasExternalIP }}
      {# SEE README.md IN THIS REPO -- This is where all neo4j CC config goes #}
      metadata:
        items:
        - key: initial-password
          value: $(ref.generated-password.password)
        - key: dbms_mode
          value: CORE
        - key: causal_clustering_initial_discovery_members
          value: {% for i in range(1, clusterNodes+1) %}{{instanceName}}-{{i}}:5000{% if not loop.last %},{% endif %}{% endfor %}
        - key: causal_clustering_minimum_core_cluster_size_at_runtime
          value: "3"
        - key: causal_clustering_minimum_core_cluster_size_at_formation
          value: "3"
        - key: startup-script
          value: |
{% include "node-startup-script.sh.jinja" %}

      serviceAccounts:
        - email: default
          scopes:
            - 'https://www.googleapis.com/auth/cloud.useraccounts.readonly'
            - 'https://www.googleapis.com/auth/devstorage.read_only'
            - 'https://www.googleapis.com/auth/logging.write'
            - 'https://www.googleapis.com/auth/monitoring.write'
            - 'https://www.googleapis.com/auth/cloudruntimeconfig'

  - name: {{ name }}-replicas
    type: vm_multiple_instances.py
    properties:
      password: $(ref.generated-password.password)
      tags:
        items:
        - neo4j
        - neo4j-causal-cluster
        - neo4j-read-replica
        - neo4j-{{ deployment }}
      instanceName: {{ "%s-replica-vm" % deployment }}
      numberOfVMReplicas: {{ readReplicas }}
      sourceImage: {{ vmImage }}
      zone: {{ zone }}
      machineType: {{ machineType }}
      network: {{ network }}
      {% if subnetwork %}
      subnetwork: {{ subnetwork }}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      hasExternalIP: {{ hasExternalIP }}
      {# SEE README.md IN THIS REPO -- This is where all neo4j CC config goes #}
      metadata:
        items:
        - key: initial-password
          value: $(ref.generated-password.password)
        - key: dbms_mode
          value: READ_REPLICA
        - key: causal_clustering_initial_discovery_members
          value: {% for i in range(1, clusterNodes+1) %}{{instanceName}}-{{i}}:5000{% if not loop.last %},{% endif %}{% endfor %}
        - key: causal_clustering_minimum_core_cluster_size_at_runtime
          value: "3"
        - key: causal_clustering_minimum_core_cluster_size_at_formation
          value: "3"
        - key: startup-script
          value: |
{% include "node-startup-script.sh.jinja" %}

      serviceAccounts:
        - email: default
          scopes:
            - 'https://www.googleapis.com/auth/cloud.useraccounts.readonly'
            - 'https://www.googleapis.com/auth/devstorage.read_only'
            - 'https://www.googleapis.com/auth/logging.write'
            - 'https://www.googleapis.com/auth/monitoring.write'
            - 'https://www.googleapis.com/auth/cloudruntimeconfig'

  {#
   # Wait on signaled success of VM deploys before returning.
   # Each VM writes a runtime config var under a random UUID.  We
   # want to see <successCardinality> of these before signaling the
   # deployment finished.  Clock on the timeout doesn't start until
   # the first VM (instanceName) is up.
   #}
  - name: cluster-waiter
    type: waiter.jinja
    properties:
      instanceName: {{ instanceName }}-1
      successCardinality: {{ clusterNodes }}

  {#
   # Firewalling rules
   #}
  {% if properties["enableTcp7687"] %}
  - name: {{ deployment[0:20] }}-bolt-7687
    type: compute.v1.firewall
    properties:
      network: $(ref.{{ instanceName }}-1.networkInterfaces[0].network)
      {% if properties.get("tcp7687SourceRanges") %}
      sourceRanges:
        {% for source in properties["tcp7687SourceRanges"].split(',') %}
        - '{{ source | trim }}'
        {% endfor %}
      {% else %}
      sourceRanges: ["0.0.0.0/0"]
      {% endif %}
      targetTags: ["neo4j-{{ deployment }}"]
      allowed:
        - IPProtocol: TCP
          ports: ["7687"]
  {% endif %}

  {% if properties["enableTcp7473"] %}
  - name: {{ deployment[0:20] }}-https-7473
    type: compute.v1.firewall
    properties:
      network: $(ref.{{ instanceName }}-1.networkInterfaces[0].network)
      {% if properties.get("tcp7473SourceRanges") %}
      sourceRanges:
        {% for source in properties["tcp7473SourceRanges"].split(',') %}
        - '{{ source | trim }}'
        {% endfor %}
      {% else %}
      sourceRanges: ["0.0.0.0/0"]
      {% endif %}
      targetTags: ["neo4j-{{ deployment }}"]
      allowed:
        - IPProtocol: TCP
          ports: ["7473"]
  {% endif %}

  - name: {{ deployment[0:20] }}-internal-comms
    type: compute.v1.firewall
    properties:
      network: $(ref.{{ instanceName }}-1.networkInterfaces[0].network)
      sourceRanges: ["10.0.0.0/8"]
      targetTags: ["neo4j-{{ deployment }}"]
      allowed:
        - IPProtocol: TCP
          ports: ["5000", "6000", "7000"]
        - IPProtocol: UDP
          ports: ["5000", "6000", "7000"]

outputs:
  - name: deployment
    value: {{ deployment }}
  - name: project
    value: {{ project }}
  - name: username
    value: neo4j
  - name: password
    value: $(ref.generated-password.password)
  - name: vm1Id
    value: $(ref.{{ instanceName }}-1.id)
  - name: vm1URL
    value: https://$(ref.{{ instanceName }}-1.networkInterfaces[0].accessConfigs[0].natIP):7473/
  - name: vm1Name
    value: {{ instanceName }}-1
  - name: vm1SelfLink
    value: $(ref.{{ instanceName }}-1.selfLink)
  - name: vm2Id
    value: $(ref.{{ instanceName }}-2.id)
  - name: vm2URL
    value: https://$(ref.{{ instanceName }}-2.networkInterfaces[0].accessConfigs[0].natIP):7473/
  - name: vm2Name
    value: {{ instanceName }}-2
  - name: vm2SelfLink
    value: $(ref.{{ instanceName }}-2.selfLink)
  - name: vm3Id
    value: $(ref.{{ instanceName }}-3.id)
  - name: vm3URL
    value: https://$(ref.{{ instanceName }}-3.networkInterfaces[0].accessConfigs[0].natIP):7473/
  - name: vm3Name
    value: {{ instanceName }}-3
  - name: vm3SelfLink
    value: $(ref.{{ instanceName }}-3.selfLink)
