{
    {% if default_machine is not defined %}
      {% set default_machine = "r4.large" %}
    {% endif %}

    {% if profile is not defined %}
      {% set profile = "marketplace" %}
    {% endif %}

    "Description": "Neo4j on AWS - creates a variable number of EC2 Ubuntu machines, a VPC, elastic IP addresses, and deploys the Neo4j Graph Database cluster on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {        
        "AWSRegionArch2AMI": {% with regionMappings="template-parts/region2AMIMappings-"+edition+"-"+profile+".jinja" %}
           {% include regionMappings %}
        {% endwith %}
    },
    "Parameters": {
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "{{default_machine}}",
            "AllowedValues": {% include 'template-parts/allowable-machine-types.jinja' %},
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "SSHKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "AllowedPattern": ".+"
        },
        "NetworkWhitelist": {
            "Description": " The IP address range that can be used to connect to Neo4j",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.  For example, 0.0.0.0/0 for open internet access."
        },
        "Password": {
            "NoEcho": true,
            "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
            "Type": "String",
            "MinLength": 8,
            "MaxLength": 40,
            "AllowedPattern": "^[a-zA-Z0-9\\.-]+$"
        },
        "VolumeType": {
            "Description": "What kind of storage to attach",
            "Type": "String",
            "Default": "gp2",
            "AllowedValues": [
                "io1", "gp2", "st1"
            ]
        },
        "VolumeSizeGB": {
            "Description": "How much EBS storage is allocated to each cluster node, in GiB",
            "Type": "Number",
            "Default": "100",
            "MinValue": "10",
            "MaxValue": "1000",
            "ConstraintDescription": "Must be a valid EBS disk size in GiB."
        }
    },
    "Resources": {
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "EnableDnsSupport" : "true",
                "EnableDnsHostnames" : "true",
                "InstanceTenancy": "default",
                "CidrBlock" : "10.0.0.0/16",
                "Tags" : [ 
                    {
                        "Key": "Name", 
                        "Value": {{ "Neo4jVPC" | appendStack }}
                    },
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } 
                ]
            }
        },

        "Subnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone": {
                    "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
                },
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : "10.0.0.0/24",
                "Tags" : [ 
                    {"Key": "Name", "Value": {{ ("Neo4jSubnet") | appendStack }} },
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } 
                ],
                "MapPublicIpOnLaunch": "true"
            }
        },

        "SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            }
        },

        "SubnetNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet" },
                "NetworkAclId" : { "Ref" : "NetworkAcl" }
            }
        },

        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {                
                "Tags" : [ 
                    {"Key": "Name", "Value": {{ "Neo4jGateway" | appendStack }} },
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } 
                ]
            }
        },

        "AttachGateway" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "RouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref" : "VPC"},
                "Tags" : [ 
                    {"Key": "Name", "Value": {{ "Neo4jRouteTable" | appendStack }} },
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } 
                ]
            }
        },

        "Route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "AttachGateway",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteTable" },
                "DestinationCidrBlock" : { "Ref": "NetworkWhitelist" },
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "NetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : {"Ref" : "VPC"},
                "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
            }
        },

        {# outbound HTTPS/HTTP must be permitted for awscli, package managers to work #}
        {% for reason, port in { "SSH": 22, "Bolt": 7689, "Neo4jHTTPS": 7473, "HTTPS": "443", "HTTP": "80" }.items() %}
            {% set outer_loop = loop %}
            {% for direction, egressBool in { "Ingress": False, "Egress": True }.items() %}
                "{{reason}}{{direction}}NetworkAclEntry": {
                    "Type" : "AWS::EC2::NetworkAclEntry",
                    "Properties" : {
                        "NetworkAclId" : {"Ref" : "NetworkAcl"},
                        "RuleNumber" : "{{100 + (outer_loop.index * loop.index) }}",
                        "Protocol" : "6", {# this means TCP #}
                        "RuleAction" : "allow",
                        "Egress" : "{{egressBool | string | lower }}",
                        "CidrBlock" : { "Ref": "NetworkWhitelist" },
                        "PortRange" : {"From" : "{{port}}", "To" : "{{port}}"}
                    }                
                },
            {% endfor %}
        {% endfor %}

        "InboundResponsePortsNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "NetworkAcl"},
                "RuleNumber" : "300",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Ref": "NetworkWhitelist" },
                "PortRange" : {"From" : "1024", "To" : "65535"}
            }
        },

        "OutBoundResponsePortsNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : {"Ref" : "NetworkAcl"},
                "RuleNumber" : "301",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : { "Ref": "NetworkWhitelist" },
                "PortRange" : {"From" : "1024", "To" : "65535"}
            }
        },

        "ReadOwnTags": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {{ "work-with-tags" | appendStack }},
                "AssumeRolePolicyDocument": { 
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "root",
                        {# Adapted/customized from arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess #}
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {  
                                    "Effect": "Allow",
                                    "Action": "ec2:CreateTags",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                }
                            ]                            
                        }
                    }
                ]
            }
        },

        "instProfNeo4jEnterprise": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{ "Ref": "ReadOwnTags"}],
                "InstanceProfileName": {{ "read-own-tags-ip" | appendStack }}
            }            
        },

        "sgNeo4jEnterprise": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId" : { "Ref" : "VPC" },
                "GroupDescription": "Neo4j Ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": { "Ref": "NetworkWhitelist" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7687",
                        "ToPort": "7687",
                        "CidrIp": { "Ref": "NetworkWhitelist" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7473",
                        "ToPort": "7473",
                        "CidrIp": { "Ref": "NetworkWhitelist" }
                    }
                ]
            }
        },
        
        "Neo4jServer": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": { "Ref": "instProfNeo4jEnterprise" },
                "AvailabilityZone": {
                    "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64" ]
                },

                "NetworkInterfaces" : [{
                    "GroupSet"                 : [{ "Ref" : "sgNeo4jEnterprise" }],
                    "AssociatePublicIpAddress" : "true",
                    "DeviceIndex"              : "0",
                    "DeleteOnTermination"      : "true",
                    "SubnetId"                 : { "Ref" : "Subnet" }
                }],
                
                "InstanceType": { "Ref": "InstanceType" },
                "KeyName": { "Ref": "SSHKeyName" },
                "Monitoring": "false",

                "Tags": [
                    { 
                        "Key": "Name", "Value": {{ ("neo4j-vm") | appendStack }}
                    },                   
                    { "Key": "Application", "Value": { "Ref" : "AWS::StackId"} },
                    { "Key": "neo4j_mode", "Value": "SINGLE" },
                    { "Key": "dbms_mode", "Value": "SINGLE" },
                    {
                        "Key": "initial_password",
                        "Value": { "Ref": "Password" }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {"Fn::Join": [ "",
                        {% include 'template-parts/vm-startup-standalone.snippet.jinja' %}
                    ]}
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": { "Ref": "VolumeType" },
                            "VolumeSize": { "Ref": "VolumeSizeGB" },
                            "DeleteOnTermination": "true"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "Note": {
            "Value": {
                "Fn::Join": [
                    "\n",
                    [
                        "Your node is deployed, and currently forming.",
                        "URL below should be available within a few minutes"
                    ]
                ]
            }
        },
        "IMPORTANT": {
            "Value": {
                "Fn::Join": [
                    "\n",
                    [
                    "PLEASE TAKE NOTE!  Your instance begins with an unsigned ",
                    "SSL certificate.  This means that in order to access your ",
                    "new system, you should configure your browser to trust this ",
                    "IP address on **both** port 7473 **and** port 7687, otherwise ",
                    "you may have issues connecting. ",
                    "For more information see https://community.neo4j.com/t/troubleshooting-connection-issues-to-neo4j/129"
                    ]
                ]
            }
        },
        "Neo4jWebadmin": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer",
                                "PublicIp"
                            ]
                        },
                        ":7473/"
                    ]
                ]
            },
            "Description": "This is the address of your Neo4j server web administration console."
        },
        "Username": {
            "Value": "neo4j"
        },
        "Password": {
            "Value": {
                "Ref": "Password"
            }
        },
        "SSH": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh -i ${HOME}/.ssh/",
                        { "Ref": "SSHKeyName" },
                        ".pem -l ubuntu@",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            },
            "Description": "This is how you gain remote access to the machine."
        }
    }
}