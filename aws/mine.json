{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "CreateNode0": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateNode1": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateNode2": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateNode3": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        5
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        6
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateNode4": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        5
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        6
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateNode5": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        6
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateNode6": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        0,
                        1
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateReplica0": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        1
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        2
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        3
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica1": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        2
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        3
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica2": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        3
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica3": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica4": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        0,
                        1
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        }
    },
    "Description": "Neo4j on AWS - creates a variable number of EC2 Ubuntu machines, a VPC, elastic IP addresses, and deploys the Neo4j Graph Database cluster on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Mappings": {
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "64": "ami-0e4929e7322b378dd"
            },
            "ap-south-1": {
                "64": "ami-0c9855c2d5f1c6527"
            },
            "ap-southeast-1": {
                "64": "ami-0cf36d7ad51a09a42"
            },
            "eu-central-1": {
                "64": "ami-05f30083fe95f0fd4"
            },
            "eu-west-1": {
                "64": "ami-0572a469fb0d71326"
            },
            "sa-east-1": {
                "64": "ami-019a244d7af21895c"
            },
            "us-east-1": {
                "64": "ami-0f6db720c2e3c7b68"
            },
            "us-east-2": {
                "64": "ami-0a366ea274e2488ee"
            },
            "us-west-1": {
                "64": "ami-00d82e0b875e505dc"
            },
            "us-west-2": {
                "64": "ami-084b94e5c357b909e"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Cluster Configuration"
                    },
                    "Parameters": [
                        "ClusterNodes",
                        "ReadReplicas"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "InstanceType",
                        "VolumeType",
                        "VolumeSizeGB",
                        "EncryptDataVolume"
                    ]
                },
                {
                    "Label": {
                        "default": "Access Control"
                    },
                    "Parameters": [
                        "SSHKeyName",
                        "NetworkWhitelist",
                        "Password"
                    ]
                }
            ]
        }
    },
    "Outputs": {
        "IMPORTANT": {
            "Value": {
                "Fn::Join": [
                    "\n",
                    [
                        "PLEASE TAKE NOTE!  Your instance begins with an unsigned ",
                        "SSL certificate.  This means that in order to access your ",
                        "new system, you should configure your browser to trust this ",
                        "IP address on **both** port 7473 **and** port 7687, otherwise ",
                        "you may have issues connecting. ",
                        "For more information see https://community.neo4j.com/t/troubleshooting-connection-issues-to-neo4j/129"
                    ]
                ]
            }
        },
        "Neo4jWebadmin": {
            "Description": "This is the address of your Neo4j server web administration console.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer1",
                                "PublicIp"
                            ]
                        },
                        ":7473/"
                    ]
                ]
            }
        },
        "Node0Ip": {
            "Value": {
                "Fn::GetAtt": [
                    "Neo4jServer0",
                    "PublicIp"
                ]
            }
        },
        "Node1Ip": {
            "Value": {
                "Fn::GetAtt": [
                    "Neo4jServer1",
                    "PublicIp"
                ]
            }
        },
        "Node2Ip": {
            "Value": {
                "Fn::GetAtt": [
                    "Neo4jServer2",
                    "PublicIp"
                ]
            }
        },
        "Note": {
            "Value": {
                "Fn::Join": [
                    "\n",
                    [
                        "Your cluster is deployed, and currently forming.",
                        "Now is a good time to get a cup of coffee, the ",
                        "URL below should be available within a few minutes"
                    ]
                ]
            }
        },
        "Password": {
            "Value": {
                "Ref": "Password"
            }
        },
        "SSH": {
            "Description": "This is how you gain remote access to the machine.",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh -i ${HOME}/.ssh/",
                        {
                            "Ref": "SSHKeyName"
                        },
                        ".pem -l ubuntu@",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer1",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            }
        },
        "Username": {
            "Value": "neo4j"
        }
    },
    "Parameters": {
        "ClusterNodes": {
            "Default": 3,
            "Description": "Number of core cluster node VMs",
            "MaxValue": 7,
            "MinValue": 3,
            "Type": "Number"
        },
        "EncryptDataVolume": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true",
            "Description": "Should EBS storage be encrypted?  Default is yes.",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "x1e.16xlarge",
                "x1e.8xlarge",
                "x1e.4xlarge",
                "x1e.2xlarge",
                "x1e.xlarge",
                "x1.16xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type.",
            "Default": "r4.large",
            "Description": "EC2 instance type",
            "Type": "String"
        },
        "NetworkWhitelist": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.  For example, 0.0.0.0/0 for open internet access.",
            "Default": "0.0.0.0/0",
            "Description": " The IP address range that can be used to connect to Neo4j",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "Password": {
            "AllowedPattern": "^[a-zA-Z0-9\\.-]+$",
            "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
            "MaxLength": 40,
            "MinLength": 8,
            "NoEcho": true,
            "Type": "String"
        },
        "ReadReplicas": {
            "Default": 0,
            "Description": "Number of read replicas in the cluster",
            "MaxValue": 5,
            "MinValue": 0,
            "Type": "Number"
        },
        "SSHKeyName": {
            "AllowedPattern": ".+",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "VolumeSizeGB": {
            "ConstraintDescription": "Must be a valid EBS disk size in GiB.",
            "Default": "100",
            "Description": "How much EBS storage is allocated to each cluster node, in GiB",
            "MaxValue": "1000",
            "MinValue": "10",
            "Type": "Number"
        },
        "VolumeType": {
            "AllowedValues": [
                "io1",
                "gp2",
                "st1"
            ],
            "Default": "gp2",
            "Description": "What kind of storage to attach",
            "Type": "String"
        }
    },
    "Resources": {
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "BoltEgressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "7689",
                    "To": "7689"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "104"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "BoltIngressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "7689",
                    "To": "7689"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "102"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "DNSZone": {
            "DependsOn": "VPC",
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": "Zone to define private DNS for neo4j nodes"
                },
                "HostedZoneTags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jPrivateZone",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "Name": "neo4j",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VPC"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            },
            "Type": "AWS::Route53::HostedZone"
        },
        "HTTPEgressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "110"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "HTTPIngressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "105"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "HTTPSEgressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "108"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "HTTPSIngressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "104"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InboundResponsePortsNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "300"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "Int1NetworkAclEntry": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "5000",
                    "To": "5000"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "201"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "Int2NetworkAclEntry": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "6000",
                    "To": "6000"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "202"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "Int3NetworkAclEntry": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "7000",
                    "To": "7000"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "203"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jGateway",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "Neo4jHTTPSEgressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "7473",
                    "To": "7473"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "106"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "Neo4jHTTPSIngressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "7473",
                    "To": "7473"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "103"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "Neo4jReplica0": {
            "Condition": "CreateReplica0",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-0",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "0"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jReplica0DNS": {
            "Condition": "CreateReplica0",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j replica 0.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "replica0.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer0",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jReplica1": {
            "Condition": "CreateReplica1",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "1"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jReplica1DNS": {
            "Condition": "CreateReplica1",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j replica 1.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "replica1.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer1",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jReplica2": {
            "Condition": "CreateReplica2",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet2"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-2",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "2"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jReplica2DNS": {
            "Condition": "CreateReplica2",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j replica 2.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "replica2.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer2",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jReplica3": {
            "Condition": "CreateReplica3",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-3",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "3"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jReplica3DNS": {
            "Condition": "CreateReplica3",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j replica 3.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "replica3.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer3",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jReplica4": {
            "Condition": "CreateReplica4",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-4",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "4"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jReplica4DNS": {
            "Condition": "CreateReplica4",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j replica 4.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "replica4.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer4",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer0": {
            "Condition": "CreateNode0",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-0",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "0"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer0DNS": {
            "Condition": "CreateNode0",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 0.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node0.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer0",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer1": {
            "Condition": "CreateNode1",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "1"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer1DNS": {
            "Condition": "CreateNode1",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 1.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node1.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer1",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer2": {
            "Condition": "CreateNode2",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet2"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-2",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "2"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer2DNS": {
            "Condition": "CreateNode2",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 2.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node2.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer2",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer3": {
            "Condition": "CreateNode3",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-3",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "3"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer3DNS": {
            "Condition": "CreateNode3",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 3.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node3.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer3",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer4": {
            "Condition": "CreateNode4",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-4",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "4"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer4DNS": {
            "Condition": "CreateNode4",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 4.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node4.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer4",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer5": {
            "Condition": "CreateNode5",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet2"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-5",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "5"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer5DNS": {
            "Condition": "CreateNode5",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 5.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node5.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer5",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "Neo4jServer6": {
            "Condition": "CreateNode6",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": "10",
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            }
                        }
                    }
                ],
                "DisableApiTermination": "FALSE",
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-6",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "6"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Neo4jServer6DNS": {
            "Condition": "CreateNode6",
            "DependsOn": "DNSZone",
            "Properties": {
                "Comment": "DNS names for neo4j node 6.",
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Name": "node6.neo4j.",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer6",
                            "PrivateIp"
                        ]
                    }
                ],
                "TTL": "900",
                "Type": "A"
            },
            "Type": "AWS::Route53::RecordSet"
        },
        "NetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "OutBoundResponsePortsNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "301"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "ReadOwnTags": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": "ec2:CreateTags",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "ec2:Describe*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                },
                                {
                                    "Action": "autoscaling:Describe*",
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "root"
                    }
                ],
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "work-with-tags",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                }
            },
            "Type": "AWS::IAM::Role"
        },
        "Route": {
            "DependsOn": "AttachGateway",
            "Properties": {
                "DestinationCidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "RouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jRouteTable",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "SSHEgressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "102"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "SSHIngressNetworkAclEntry": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "101"
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "StackTokenWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "Subnet0": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.0.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jSubnet0",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet1": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jSubnet1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "Subnet2": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "CidrBlock": "10.0.2.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jSubnet2",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "SubnetNetworkAclAssociation0": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "SubnetId": {
                    "Ref": "Subnet0"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "SubnetNetworkAclAssociation1": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "SubnetId": {
                    "Ref": "Subnet1"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "SubnetNetworkAclAssociation2": {
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "SubnetId": {
                    "Ref": "Subnet2"
                }
            },
            "Type": "AWS::EC2::SubnetNetworkAclAssociation"
        },
        "SubnetRouteTableAssociation0": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet0"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "SubnetRouteTableAssociation1": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet1"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "SubnetRouteTableAssociation2": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet2"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "VPC": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jVPC",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "WaitOnPasswordReset": {
            "DependsOn": "Neo4jServer0",
            "Properties": {
                "Count": "1",
                "Handle": {
                    "Ref": "StackTokenWaitHandle"
                },
                "Timeout": "2000"
            },
            "Type": "AWS::CloudFormation::WaitCondition"
        },
        "instProfNeo4jEnterprise": {
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Join": [
                        "-",
                        [
                            "read-own-tags-ip",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "Roles": [
                    {
                        "Ref": "ReadOwnTags"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "sgNeo4jEnterprise": {
            "Properties": {
                "GroupDescription": "Neo4j Ports",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.0.0/16",
                        "FromPort": "5000",
                        "IpProtocol": "tcp",
                        "ToPort": "5000"
                    },
                    {
                        "CidrIp": "10.0.0.0/16",
                        "FromPort": "6000",
                        "IpProtocol": "tcp",
                        "ToPort": "6000"
                    },
                    {
                        "CidrIp": "10.0.0.0/16",
                        "FromPort": "7000",
                        "IpProtocol": "tcp",
                        "ToPort": "7000"
                    },
                    {
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        },
                        "FromPort": "7687",
                        "IpProtocol": "tcp",
                        "ToPort": "7687"
                    },
                    {
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        },
                        "FromPort": "7473",
                        "IpProtocol": "tcp",
                        "ToPort": "7473"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        }
    }
}
